# Copyright (C) 2009 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# ====================================================================
#
# Define the main configuration variables, and read the host-specific
# configuration file that is normally generated by build/host-setup.sh
#
# ====================================================================

basedir = ..

# ====================================================================
# build-local.mk : Directory Setting 
# ====================================================================

# Don't output to stdout if we're being invoked to dump a variable
DUMP_VAR := $(patsubst DUMP_%,%,$(filter DUMP_%,$(MAKECMDGOALS)))
ifneq (,$(DUMP_VAR))
    NDK_NO_INFO := 1
    NDK_NO_WARNINGS := 1
endif

NDK_ROOT := $(basedir)

ifeq ($(NDK_LOG),1)
    $(info Android NDK: NDK installation path auto-detected: '$(NDK_ROOT)')
endif
ifneq ($(words $(NDK_ROOT)),1)
    $(info Android NDK: Your NDK installation path contains spaces.)
    $(info Android NDK: Please re-install to a different location to fix the issue !)
    $(error Aborting.)
endif

# ====================================================================
# init.mk : BEGIN
# ====================================================================

# Disable GNU Make implicit rules

# this turns off the suffix rules built into make
.SUFFIXES:

# this turns off the RCS / SCCS implicit rules of GNU Make
% : RCS/%,v
% : RCS/%
% : %,v
% : s.%
% : SCCS/s.%

# If a rule fails, delete $@.
.DELETE_ON_ERROR:

# Define NDK_LOG=1 in your environment to display log traces when
# using the build scripts. See also the definition of ndk_log below.
#
NDK_LOG := $(strip $(NDK_LOG))
ifeq ($(NDK_LOG),true)
    override NDK_LOG := 1
endif

# Check that we have at least GNU Make 3.81
# We do this by detecting whether 'lastword' is supported
#
MAKE_TEST := $(lastword a b c d e f)
ifneq ($(MAKE_TEST),f)
    $(error Android NDK: GNU Make version $(MAKE_VERSION) is too low (should be >= 3.81))
endif
ifeq ($(NDK_LOG),1)
    $(info Android NDK: GNU Make version $(MAKE_VERSION) detected)
endif

# NDK_ROOT *must* be defined and point to the root of the NDK installation
NDK_ROOT := $(strip $(NDK_ROOT))
ifndef NDK_ROOT
    $(error ERROR while including init.mk: NDK_ROOT must be defined !)
endif
ifneq ($(words $(NDK_ROOT)),1)
    $(info,The Android NDK installation path contains spaces: '$(NDK_ROOT)')
    $(error,Please fix the problem by reinstalling to a different location.)
endif

# --------------------------------------------------------------------
#
# Define a few useful variables and functions.
# More stuff will follow in definitions.mk.
#
# --------------------------------------------------------------------

# Used to output warnings and error from the library, it's possible to
# disable any warnings or errors by overriding these definitions
# manually or by setting NDK_NO_WARNINGS or NDK_NO_ERRORS

__ndk_name    := Android NDK
__ndk_info     = $(info $(__ndk_name): $1 $2 $3 $4 $5)
__ndk_warning  = $(warning $(__ndk_name): $1 $2 $3 $4 $5)
__ndk_error    = $(error $(__ndk_name): $1 $2 $3 $4 $5)

ifdef NDK_NO_INFO
__ndk_info :=
endif
ifdef NDK_NO_WARNINGS
__ndk_warning :=
endif
ifdef NDK_NO_ERRORS
__ndk_error :=
endif

# --------------------------------------------------------------------
# Function : ndk_log
# Arguments: 1: text to print when NDK_LOG is defined to 1
# Returns  : None
# Usage    : $(call ndk_log,<some text>)
# --------------------------------------------------------------------
ifeq ($(NDK_LOG),1)
ndk_log = $(info $(__ndk_name): $1)
else
ndk_log :=
endif

# --------------------------------------------------------------------
# Host and Toolchain Setting 
# --------------------------------------------------------------------

ifeq ($(TARGET),)
$(call __ndk_info,Warning : you are here without proper command!!!!)
include $(basedir)/buildx/make/project.mk
include $(basedir)/buildx/make/$(project_def_target).mk
TARGET = $(project_def_target)
else
include $(basedir)/buildx/make/project.mk
include $(basedir)/buildx/make/$(TARGET).mk
endif

NDK_ALL_ARCHS := x86_64 arm64
NDK_ALL_TOOLCHAINS := aarch64-linux-android-clang x86_64-clang

NDK_ARCH.arm64.abis := arm64-v8a
NDK_ARCH.x86_64.abis := x86_64

NDK_ABI.arm64-v8a.arch = arm64
NDK_ABI.x86_64.arch = x86_64

NDK_ABI.arm64-v8a.toolchains = aarch64-linux-android-clang
NDK_ABI.x86_64.toolchains = x86_64-clang

NDK_TOOLCHAIN.aarch64-linux-android-clang.abis := arm64-v8a
NDK_TOOLCHAIN.x86_64-clang.abis := x86_64


# --------------------------------------------------------------------
# Load definitions.mk 
# --------------------------------------------------------------------

# The location of the build system files
BUILD_SYSTEM := $(basedir)/buildx/make/ndk

# Include common definitions
include $(BUILD_SYSTEM)/definitions.mk


# --------------------------------------------------------------------
# ABI and PLATFORM settings 
# --------------------------------------------------------------------

# checkbuild.py generates these two files from the files in $NDK/meta.
include $(BUILD_SYSTEM)/abis.mk
include $(BUILD_SYSTEM)/platforms.mk

NDK_KNOWN_DEVICE_ABIS := $(NDK_KNOWN_DEVICE_ABI64S) $(NDK_KNOWN_DEVICE_ABI32S)

NDK_APP_ABI_ALL_EXPANDED := $(NDK_KNOWN_DEVICE_ABIS)
NDK_APP_ABI_ALL32_EXPANDED := $(NDK_KNOWN_DEVICE_ABI32S)
NDK_APP_ABI_ALL64_EXPANDED := $(NDK_KNOWN_DEVICE_ABI64S)

NDK_MIN_PLATFORM := android-$(NDK_MIN_PLATFORM_LEVEL)
NDK_MAX_PLATFORM := android-$(NDK_MAX_PLATFORM_LEVEL)

$(call ndk_log,Found max platform level: $(NDK_MAX_PLATFORM_LEVEL))

# Allow the user to define NDK_TOOLCHAIN to a custom toolchain name.
# This is normally used when the NDK release comes with several toolchains
# for the same architecture (generally for backwards-compatibility).
#
NDK_TOOLCHAIN := $(strip $(NDK_TOOLCHAIN))
ifdef NDK_TOOLCHAIN
    # check that the toolchain name is supported
    $(if $(filter-out $(NDK_ALL_TOOLCHAINS),$(NDK_TOOLCHAIN)),\
      $(call __ndk_info,NDK_TOOLCHAIN is defined to the unsupported value $(NDK_TOOLCHAIN)) \
      $(call __ndk_info,Please use one of the following values: $(NDK_ALL_TOOLCHAINS))\
      $(call __ndk_error,Aborting)\
    ,)
    $(call ndk_log, Using specific toolchain $(NDK_TOOLCHAIN))
endif

$(call ndk_log, This NDK supports the following target architectures and ABIS:)
$(foreach arch,$(NDK_ALL_ARCHS),\
    $(call ndk_log, $(space)$(space)$(arch): $(NDK_ARCH.$(arch).abis))\
)
$(call ndk_log, This NDK supports the following toolchains and target ABIs:)
$(foreach tc,$(NDK_ALL_TOOLCHAINS),\
    $(call ndk_log, $(space)$(space)$(tc):  $(NDK_TOOLCHAIN.$(tc).abis))\
)

$(call ndk_log,Toolchain Variables)
$(call ndk_log,$(space) TARGET_TOOLCHAIN = '$(TARGET_TOOLCHAIN)')
$(call ndk_log,$(space) TARGET_PLATFORM  = '$(TARGET_PLATFORM)')
$(call ndk_log,$(space) TARGET_ARCH_ABI  = '$(TARGET_ARCH_ABI)')
$(call ndk_log,$(space) TARGET_ABI       = '$(TARGET_ABI)')
$(call ndk_log,$(space) SYSROOT          = '$(SYSROOT)')
$(call ndk_log,$(space) TARGET_CRTBEGIN_STATIC_O         = '$(TARGET_CRTBEGIN_STATIC_O)')
$(call ndk_log,$(space) TARGET_CRTBEGIN_DYNAMIC_O        = '$(TARGET_CRTBEGIN_DYNAMIC_O)')
$(call ndk_log,$(space) TARGET_CRTEND_O                  = '$(TARGET_CRTEND_O)')
$(call ndk_log,$(space) TARGET_PREBUILT_SHARED_LIBRARIES = '$(TARGET_PREBUILT_SHARED_LIBRARIES)')
$(call ndk_log,$(space) TARGET_PREBUILT_SHARED_LIBRARIES = '$(TARGET_PREBUILT_SHARED_LIBRARIES)')

# ====================================================================
# init.mk : END
# ====================================================================


# --------------------------------------------------------------------
# Project Path Definitions 
# --------------------------------------------------------------------

NDK_PROJECT_PATH := .
APP_PROJECT_PATH := .

# Where all generated files will be stored during a build
NDK_OUT := $(basedir)/out

# Where all app-specific generated files will be stored
NDK_APP_OUT := $(NDK_OUT)/apps

# Where all app-libs-specific generated files will be stored
NDK_APP_LIBS_OUT := $(NDK_APP_OUT)/libs

# Where all host-specific generated files will be stored
NDK_HOST_OUT := $(NDK_OUT)/host/$(HOST_TAG)


$(call ndk_log,Output Directories)
$(call ndk_log,$(space) NDK_OUT          = '$(NDK_OUT)')
$(call ndk_log,$(space) NDK_APP_OUT      = '$(NDK_APP_OUT)')
$(call ndk_log,$(space) NDK_APP_LIBS_OUT = '$(NDK_APP_LIBS_OUT)')
$(call ndk_log,$(space) NDK_HOST_OUT     = '$(NDK_HOST_OUT)')


# ====================================================================
# add-application.mk : BEGIN 
# ====================================================================

NDK_APP_VARS := APP_MODULES APP_PROJECT_PATH
NDK_APPLICATION_MK := $(BUILD_SYSTEM)/default-application.mk
NDK_APP_BUILD_SCRIPT := ./*/buildx.mk

APP := bionic
APP_PLATFORM_LEVEL := 21

NDK_APPS := $(APP)
NDK_APP_ABI := all64
#NDK_APP_STL := c++_static

NDK_APP_MODULES :=            \
    c_jemalloc_wrapper        \
    c_bootstrap               \
    c_init_static             \
    c_init_dynamic            \
    c_tzcode                  \
    c_dns                     \
    c_freebsd                 \
    c_freebsd_large_stack     \
    c_netbsd                  \
    c_openbsd_ndk             \
    c_openbsd_large_stack     \
    c_openbsd                 \
    c_gdtoa                   \
    c_fortify                 \

NDK_ALL_APPS := $(APP)
$(call set,NDK_APP.bionic,Application.mk,$(basedir)/apps/bionic/Application.mk)
$(call set,NDK_APP.bionic,APP_MODULES,$(NDK_APP_MODULES))
$(call set,NDK_APP.bionic,APP_PROJECT_PATH,$(basedir)/apps/bionic/project)

$(call ndk_log,App Settings)
$(call ndk_log,$(space) APP              = '$(APP)')
$(call ndk_log,$(space) NDK_APPS         = '$(NDK_APPS)')
$(call ndk_log,$(space) NDK_APP_ABI      = '$(NDK_APP_ABI)')
$(call ndk_log,$(space) NDK_ALL_APPS     = '$(NDK_ALL_APPS)')
$(call ndk_log,$(space) NDK_APP_VARS     = '$(NDK_APP_VARS)')
$(call ndk_log,$(space) NDK_APP.bionic.Application.mk   = '$(call get,NDK_APP.bionic,Application.mk)')
$(call ndk_log,$(space) NDK_APP.bionic.APP_MODULES      = '$(call get,NDK_APP.bionic,APP_MODULES)')
$(call ndk_log,$(space) NDK_APP.bionic.APP_PROJECT_PATH = '$(call get,NDK_APP.bionic,APP_PROJECT_PATH)')

$(call __ndk_info,Building for application '$(NDK_APPS)')

# ====================================================================
# add-application.mk : END 
# ====================================================================

# If a goal is DUMP_xxx then we dump a variable xxx instead
# of building anything
#
MAKECMDGOALS := $(filter-out DUMP_$(DUMP_VAR),$(MAKECMDGOALS))


# ====================================================================
# ignore : setup-imports.mk
# ====================================================================


# ====================================================================
# build-all.mk : BEGIN
# ====================================================================

# These phony targets are used to control various stages of the build
.PHONY: \
    all \
    host_libraries \
    host_executables \
    installed_modules \
    executables libraries \
    static_libraries \
    shared_libraries \
    clean clean-objs-dir \
    clean-executables clean-libraries \
    clean-installed-modules \
    clean-installed-binaries \
    clang_tidy_rules \

# These macros are used in Android.mk to include the corresponding
# build script that will parse the LOCAL_XXX variable definitions.
#
CLEAR_VARS                := $(BUILD_SYSTEM)/clear-vars.mk
BUILD_HOST_EXECUTABLE     := $(BUILD_SYSTEM)/build-host-executable.mk
BUILD_HOST_STATIC_LIBRARY := $(BUILD_SYSTEM)/build-host-static-library.mk
BUILD_STATIC_LIBRARY      := $(BUILD_SYSTEM)/build-static-library.mk
BUILD_SHARED_LIBRARY      := $(BUILD_SYSTEM)/build-shared-library.mk
BUILD_EXECUTABLE          := $(BUILD_SYSTEM)/build-executable.mk
PREBUILT_SHARED_LIBRARY   := $(BUILD_SYSTEM)/prebuilt-shared-library.mk
PREBUILT_STATIC_LIBRARY   := $(BUILD_SYSTEM)/prebuilt-static-library.mk

ANDROID_MK_INCLUDED := \
  $(CLEAR_VARS) \
  $(BUILD_HOST_EXECUTABLE) \
  $(BUILD_HOST_STATIC_LIBRARY) \
  $(BUILD_STATIC_LIBRARY) \
  $(BUILD_SHARED_LIBRARY) \
  $(BUILD_EXECUTABLE) \
  $(PREBUILT_SHARED_LIBRARY) \

# the first rule
all: installed_modules host_libraries host_executables clang_tidy_rules


$(foreach _app,$(NDK_APPS),\
  $(eval include $(BUILD_SYSTEM)/setup-app.mk)\
)

# --------------------------------------------------------------------
#
# Now finish the build preparation with a few rules that depend on
# what has been effectively parsed and recorded previously
#
# --------------------------------------------------------------------

clean: clean-intermediates clean-installed-binaries

distclean: clean

installed_modules: clean-installed-binaries libraries $(WANTED_INSTALLED_MODULES)
host_libraries: $(HOST_STATIC_LIBRARIES)
host_executables: $(HOST_EXECUTABLES)

# clang-tidy rules add themselves as dependencies of this phony rule in
# ev-clang-tidy.
clang_tidy_rules:

static_libraries: $(STATIC_LIBRARIES)
shared_libraries: $(SHARED_LIBRARIES)
executables: $(EXECUTABLES)

ifeq ($(GEN_COMPILE_COMMANDS_DB),true)
all: $(COMPILE_COMMANDS_JSON)
endif

libraries: static_libraries shared_libraries

clean-host-intermediates:
	$(hide) $(call host-rm,$(HOST_EXECUTABLES) $(HOST_STATIC_LIBRARIES))

clean-intermediates: clean-host-intermediates
	$(hide) $(call host-rm,$(EXECUTABLES) $(STATIC_LIBRARIES) $(SHARED_LIBRARIES))

# include dependency information
ALL_DEPENDENCY_DIRS := $(patsubst %/,%,$(sort $(ALL_DEPENDENCY_DIRS)))
-include $(wildcard $(ALL_DEPENDENCY_DIRS:%=%/*.d))

# ====================================================================
# build-all.mk : END
# ====================================================================
