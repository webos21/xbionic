# Copyright (C) 2009 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# ====================================================================
#
# Define the main configuration variables, and read the host-specific
# configuration file that is normally generated by build/host-setup.sh
#
# ====================================================================

basedir = ..

# Include common definitions
include $(basedir)/buildx/make/ndk/definitions.mk

# The location of the build system files
BUILD_SYSTEM := $(basedir)/buildx/make/ndk
# Where all generated files will be stored during a build
NDK_OUT := $(basedir)/out
# Where all app-specific generated files will be stored
NDK_APP_OUT := $(NDK_OUT)/apps
# Where all host-specific generated files will be stored
NDK_HOST_OUT := $(NDK_OUT)/host/$(HOST_TAG)

# PREPARE : Check Environment
ifeq ($(TARGET),)
$(call __ndk_info,Warning : you are here without proper command!!!!)
include $(basedir)/buildx/make/project.mk
include $(basedir)/buildx/make/$(project_def_target).mk
TARGET = $(project_def_target)
else
include $(basedir)/buildx/make/project.mk
include $(basedir)/buildx/make/$(TARGET).mk
endif

$(call __ndk_info,TOOLCHAIN_NAME   = '$(TOOLCHAIN_NAME)')

APP := bionic
NDK_APPS := $(APP)
NDK_ALL_APPS := bionic
NDK_APP_VARS := APP_MODULES APP_PROJECT_PATH
NDK_APP.bionic.Application.mk := $(basedir)/apps/bionic/Application.mk
NDK_APP.bionic.APP_MODULES := \
    c_jemalloc_wrapper        \
    c_bootstrap               \
    c_init_static             \
    c_init_dynamic            \
    c_tzcode                  \
    c_dns                     \
    c_freebsd                 \
    c_freebsd_large_stack     \
    c_netbsd                  \
    c_openbsd_ndk             \
    c_openbsd_large_stack     \
    c_openbsd                 \
    c_gdtoa                   \
    c_fortify                 \
    c_bionic                  \

NDK_APP.bionic.APP_PROJECT_PATH := $(basedir)/apps/bionic/project

$(call __ndk_info,APP              = '$(APP)')
$(call __ndk_info,NDK_APPS         = '$(NDK_APPS)')
$(call __ndk_info,NDK_ALL_APPS     = '$(NDK_ALL_APPS)')
$(call __ndk_info,NDK_APP_VARS     = '$(NDK_APP_VARS)')
$(call __ndk_info,NDK_APP_OUT      = '$(NDK_APP_OUT)')
$(call __ndk_info,NDK_APP.bionic.Application.mk   = '$(NDK_APP.bionic.Application.mk)')
$(call __ndk_info,NDK_APP.bionic.APP_MODULES       = '$(NDK_APP.bionic.APP_MODULES)')
$(call __ndk_info,NDK_APP.bionic.APP_PROJECT_PATH  = '$(NDK_APP.bionic.APP_PROJECT_PATH)')

$(call __ndk_info,TARGET_TOOLCHAIN = '$(TARGET_TOOLCHAIN)')
$(call __ndk_info,TARGET_PLATFORM  = '$(TARGET_PLATFORM)')
$(call __ndk_info,TARGET_ARCH_ABI  = '$(TARGET_ARCH_ABI)')
$(call __ndk_info,TARGET_ABI       = '$(TARGET_ABI)')
$(call __ndk_info,SYSROOT          = '$(SYSROOT)')
$(call __ndk_info,TARGET_CRTBEGIN_STATIC_O         = '$(TARGET_CRTBEGIN_STATIC_O)')
$(call __ndk_info,TARGET_CRTBEGIN_DYNAMIC_O        = '$(TARGET_CRTBEGIN_DYNAMIC_O)')
$(call __ndk_info,TARGET_CRTEND_O                  = '$(TARGET_CRTEND_O)')
$(call __ndk_info,TARGET_PREBUILT_SHARED_LIBRARIES = '$(TARGET_PREBUILT_SHARED_LIBRARIES)')
$(call __ndk_info,TARGET_PREBUILT_SHARED_LIBRARIES = '$(TARGET_PREBUILT_SHARED_LIBRARIES)')

$(call __ndk_info,Building for application '$(NDK_APPS)')
# ====================================================================
#
# Prepare the build for parsing Android.mk files
#
# ====================================================================
# These phony targets are used to control various stages of the build
.PHONY: all \
        host_libraries host_executables \
        installed_modules \
        executables libraries static_libraries shared_libraries \
        clean clean-config clean-objs-dir \
        clean-executables clean-libraries \
        clean-installed-modules
# These macros are used in Android.mk to include the corresponding
# build script that will parse the LOCAL_XXX variable definitions.
#
CLEAR_VARS                := $(BUILD_SYSTEM)/clear-vars.mk
BUILD_HOST_EXECUTABLE     := $(BUILD_SYSTEM)/build-host-executable.mk
BUILD_HOST_STATIC_LIBRARY := $(BUILD_SYSTEM)/build-host-static-library.mk
BUILD_STATIC_LIBRARY      := $(BUILD_SYSTEM)/build-static-library.mk
BUILD_SHARED_LIBRARY      := $(BUILD_SYSTEM)/build-shared-library.mk
BUILD_EXECUTABLE          := $(BUILD_SYSTEM)/build-executable.mk
ANDROID_MK_INCLUDED := \
  $(CLEAR_VARS) \
  $(BUILD_HOST_EXECUTABLE) \
  $(BUILD_HOST_STATIC_LIBRARY) \
  $(BUILD_STATIC_LIBRARY) \
  $(BUILD_SHARED_LIBRARY) \
  $(BUILD_EXECUTABLE) \
# this is the list of directories containing dependency information
# generated during the build. It will be updated by build scripts
# when module definitions are parsed.
#
ALL_DEPENDENCY_DIRS :=
# this is the list of all generated files that we would need to clean
ALL_HOST_EXECUTABLES      :=
ALL_HOST_STATIC_LIBRARIES :=
ALL_STATIC_LIBRARIES      :=
ALL_SHARED_LIBRARIES      :=
ALL_EXECUTABLES           :=
ALL_INSTALLED_MODULES     :=
# the first rule
all: installed_modules host_libraries host_executables
# ====================================================================
#
# For each platform/abi combo supported by the application, we should
# setup the toolchain and parse all module definitions files again
# to build the right dependency tree.
#
# All this work is performed by build/core/setup-toolchain.mk
#
# ====================================================================
# XXX: For now, only support one platform and one target ABI with
#      only one toolchain.
#

$(foreach _app,$(NDK_APPS),\
  $(eval include $(BUILD_SYSTEM)/setup-app.mk)\
  $(eval include ./*/buildx.mk)                    \
)

# ====================================================================
#
# Now finish the build preparation with a few rules that depend on
# what has been effectively parsed and recorded previously
#
# ====================================================================
clean: clean-intermediates clean-installed-modules
distclean: clean clean-config
installed_modules: libraries $(ALL_INSTALLED_MODULES)
host_libraries: $(HOST_STATIC_LIBRARIES)
host_executables: $(HOST_EXECUTABLES)
static_libraries: $(STATIC_LIBRARIES)
shared_libraries: $(SHARED_LIBRARIES)
executables: $(EXECUTABLES)
libraries: static_libraries shared_libraries
clean-host-intermediates:
	$(hide) rm -rf $(HOST_EXECUTABLES) $(HOST_STATIC_LIBRARIES)
clean-intermediates: clean-host-intermediates
	$(hide) rm -rf $(EXECUTABLES) $(STATIC_LIBRARIES) $(SHARED_LIBRARIES)
clean-installed-modules:
	$(hide) rm -rf $(ALL_INSTALLED_MODULES)
clean-config:
	$(hide) rm -f $(CONFIG_MAKE) $(CONFIG_H)
# include dependency information
ALL_DEPENDENCY_DIRS := $(sort $(ALL_DEPENDENCY_DIRS))
-include $(wildcard $(ALL_DEPENDENCY_DIRS:%=%/*.d))
